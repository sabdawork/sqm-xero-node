"use strict";
/**
 * Xero Payroll AU API
 * This is the Xero Payroll API for orgs in Australia region.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayrollAuApi = exports.PayrollAuApiApiKeys = void 0;
const models_1 = require("../model/payroll-au/models");
const ApiError_1 = require("../../model/ApiError");
const axios_1 = __importDefault(require("axios"));
const models_2 = require("../model/payroll-au/models");
let defaultBasePath = 'https://api.xero.com/payroll.xro/1.0';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var PayrollAuApiApiKeys;
(function (PayrollAuApiApiKeys) {
})(PayrollAuApiApiKeys || (exports.PayrollAuApiApiKeys = PayrollAuApiApiKeys = {}));
class PayrollAuApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = { 'user-agent': 'xero-node-5.1.0' };
        this._useQuerystring = false;
        this.binaryHeaders = {};
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'OAuth2': new models_2.OAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[PayrollAuApiApiKeys[key]].apiKey = value;
    }
    set accessToken(token) {
        this.authentications.OAuth2.accessToken = token;
    }
    /**
     *
     * @summary Approve a requested leave application by a unique leave application id
     * @param xeroTenantId Xero identifier for Tenant
     * @param leaveApplicationID Leave Application id for single object
     * @param idempotencyKey This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     */
    approveLeaveApplication(xeroTenantId, leaveApplicationID, idempotencyKey, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/LeaveApplications/{LeaveApplicationID}/approve'
                .replace('{' + 'LeaveApplicationID' + '}', encodeURIComponent(String(leaveApplicationID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling approveLeaveApplication.');
            }
            // verify required parameter 'leaveApplicationID' is not null or undefined
            if (leaveApplicationID === null || leaveApplicationID === undefined) {
                throw new Error('Required parameter leaveApplicationID was null or undefined when calling approveLeaveApplication.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Idempotency-Key'] = models_1.ObjectSerializer.serialize(idempotencyKey, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "LeaveApplications");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Creates a payroll employee
     * @param xeroTenantId Xero identifier for Tenant
     * @param employee
     * @param idempotencyKey This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     */
    createEmployee(xeroTenantId, employee, idempotencyKey, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Employees';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createEmployee.');
            }
            // verify required parameter 'employee' is not null or undefined
            if (employee === null || employee === undefined) {
                throw new Error('Required parameter employee was null or undefined when calling createEmployee.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Idempotency-Key'] = models_1.ObjectSerializer.serialize(idempotencyKey, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: models_1.ObjectSerializer.serialize(employee, "Array<Employee>"),
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "Employees");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Creates a leave application
     * @param xeroTenantId Xero identifier for Tenant
     * @param leaveApplication
     * @param idempotencyKey This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     */
    createLeaveApplication(xeroTenantId, leaveApplication, idempotencyKey, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/LeaveApplications';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createLeaveApplication.');
            }
            // verify required parameter 'leaveApplication' is not null or undefined
            if (leaveApplication === null || leaveApplication === undefined) {
                throw new Error('Required parameter leaveApplication was null or undefined when calling createLeaveApplication.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Idempotency-Key'] = models_1.ObjectSerializer.serialize(idempotencyKey, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: models_1.ObjectSerializer.serialize(leaveApplication, "Array<LeaveApplication>"),
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "LeaveApplications");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Creates a pay item
     * @param xeroTenantId Xero identifier for Tenant
     * @param payItem
     * @param idempotencyKey This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     */
    createPayItem(xeroTenantId, payItem, idempotencyKey, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PayItems';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createPayItem.');
            }
            // verify required parameter 'payItem' is not null or undefined
            if (payItem === null || payItem === undefined) {
                throw new Error('Required parameter payItem was null or undefined when calling createPayItem.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Idempotency-Key'] = models_1.ObjectSerializer.serialize(idempotencyKey, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: models_1.ObjectSerializer.serialize(payItem, "PayItem"),
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "PayItems");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Creates a pay run
     * @param xeroTenantId Xero identifier for Tenant
     * @param payRun
     * @param idempotencyKey This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     */
    createPayRun(xeroTenantId, payRun, idempotencyKey, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PayRuns';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createPayRun.');
            }
            // verify required parameter 'payRun' is not null or undefined
            if (payRun === null || payRun === undefined) {
                throw new Error('Required parameter payRun was null or undefined when calling createPayRun.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Idempotency-Key'] = models_1.ObjectSerializer.serialize(idempotencyKey, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: models_1.ObjectSerializer.serialize(payRun, "Array<PayRun>"),
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "PayRuns");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Creates a Payroll Calendar
     * @param xeroTenantId Xero identifier for Tenant
     * @param payrollCalendar
     * @param idempotencyKey This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     */
    createPayrollCalendar(xeroTenantId, payrollCalendar, idempotencyKey, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PayrollCalendars';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createPayrollCalendar.');
            }
            // verify required parameter 'payrollCalendar' is not null or undefined
            if (payrollCalendar === null || payrollCalendar === undefined) {
                throw new Error('Required parameter payrollCalendar was null or undefined when calling createPayrollCalendar.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Idempotency-Key'] = models_1.ObjectSerializer.serialize(idempotencyKey, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: models_1.ObjectSerializer.serialize(payrollCalendar, "Array<PayrollCalendar>"),
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "PayrollCalendars");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Creates a superfund
     * @param xeroTenantId Xero identifier for Tenant
     * @param superFund
     * @param idempotencyKey This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     */
    createSuperfund(xeroTenantId, superFund, idempotencyKey, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Superfunds';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createSuperfund.');
            }
            // verify required parameter 'superFund' is not null or undefined
            if (superFund === null || superFund === undefined) {
                throw new Error('Required parameter superFund was null or undefined when calling createSuperfund.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Idempotency-Key'] = models_1.ObjectSerializer.serialize(idempotencyKey, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: models_1.ObjectSerializer.serialize(superFund, "Array<SuperFund>"),
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "SuperFunds");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Creates a timesheet
     * @param xeroTenantId Xero identifier for Tenant
     * @param timesheet
     * @param idempotencyKey This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     */
    createTimesheet(xeroTenantId, timesheet, idempotencyKey, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Timesheets';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling createTimesheet.');
            }
            // verify required parameter 'timesheet' is not null or undefined
            if (timesheet === null || timesheet === undefined) {
                throw new Error('Required parameter timesheet was null or undefined when calling createTimesheet.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Idempotency-Key'] = models_1.ObjectSerializer.serialize(idempotencyKey, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: models_1.ObjectSerializer.serialize(timesheet, "Array<Timesheet>"),
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "Timesheets");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves an employee\'s detail by unique employee id
     * @param xeroTenantId Xero identifier for Tenant
     * @param employeeID Employee id for single object
     */
    getEmployee(xeroTenantId, employeeID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Employees/{EmployeeID}'
                .replace('{' + 'EmployeeID' + '}', encodeURIComponent(String(employeeID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getEmployee.');
            }
            // verify required parameter 'employeeID' is not null or undefined
            if (employeeID === null || employeeID === undefined) {
                throw new Error('Required parameter employeeID was null or undefined when calling getEmployee.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "Employees");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Searches payroll employees
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call
     */
    getEmployees(xeroTenantId, ifModifiedSince, where, order, page, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Employees';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getEmployees.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "Employees");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves a leave application by a unique leave application id
     * @param xeroTenantId Xero identifier for Tenant
     * @param leaveApplicationID Leave Application id for single object
     */
    getLeaveApplication(xeroTenantId, leaveApplicationID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/LeaveApplications/{LeaveApplicationID}'
                .replace('{' + 'LeaveApplicationID' + '}', encodeURIComponent(String(leaveApplicationID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getLeaveApplication.');
            }
            // verify required parameter 'leaveApplicationID' is not null or undefined
            if (leaveApplicationID === null || leaveApplicationID === undefined) {
                throw new Error('Required parameter leaveApplicationID was null or undefined when calling getLeaveApplication.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "LeaveApplications");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves leave applications
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call
     */
    getLeaveApplications(xeroTenantId, ifModifiedSince, where, order, page, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/LeaveApplications';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getLeaveApplications.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "LeaveApplications");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves leave applications including leave requests
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call
     */
    getLeaveApplicationsV2(xeroTenantId, ifModifiedSince, where, order, page, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/LeaveApplications/v2';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getLeaveApplicationsV2.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "LeaveApplications");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves pay items
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call
     */
    getPayItems(xeroTenantId, ifModifiedSince, where, order, page, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PayItems';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPayItems.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "PayItems");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves a pay run by using a unique pay run id
     * @param xeroTenantId Xero identifier for Tenant
     * @param payRunID PayRun id for single object
     */
    getPayRun(xeroTenantId, payRunID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PayRuns/{PayRunID}'
                .replace('{' + 'PayRunID' + '}', encodeURIComponent(String(payRunID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPayRun.');
            }
            // verify required parameter 'payRunID' is not null or undefined
            if (payRunID === null || payRunID === undefined) {
                throw new Error('Required parameter payRunID was null or undefined when calling getPayRun.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "PayRuns");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves pay runs
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call
     */
    getPayRuns(xeroTenantId, ifModifiedSince, where, order, page, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PayRuns';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPayRuns.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "PayRuns");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves payroll calendar by using a unique payroll calendar ID
     * @param xeroTenantId Xero identifier for Tenant
     * @param payrollCalendarID Payroll Calendar id for single object
     */
    getPayrollCalendar(xeroTenantId, payrollCalendarID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PayrollCalendars/{PayrollCalendarID}'
                .replace('{' + 'PayrollCalendarID' + '}', encodeURIComponent(String(payrollCalendarID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPayrollCalendar.');
            }
            // verify required parameter 'payrollCalendarID' is not null or undefined
            if (payrollCalendarID === null || payrollCalendarID === undefined) {
                throw new Error('Required parameter payrollCalendarID was null or undefined when calling getPayrollCalendar.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "PayrollCalendars");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves payroll calendars
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call
     */
    getPayrollCalendars(xeroTenantId, ifModifiedSince, where, order, page, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PayrollCalendars';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPayrollCalendars.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "PayrollCalendars");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves for a payslip by a unique payslip id
     * @param xeroTenantId Xero identifier for Tenant
     * @param payslipID Payslip id for single object
     */
    getPayslip(xeroTenantId, payslipID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Payslip/{PayslipID}'
                .replace('{' + 'PayslipID' + '}', encodeURIComponent(String(payslipID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getPayslip.');
            }
            // verify required parameter 'payslipID' is not null or undefined
            if (payslipID === null || payslipID === undefined) {
                throw new Error('Required parameter payslipID was null or undefined when calling getPayslip.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "PayslipObject");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves payroll settings
     * @param xeroTenantId Xero identifier for Tenant
     */
    getSettings(xeroTenantId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Settings';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getSettings.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "SettingsObject");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves a superfund by using a unique superfund ID
     * @param xeroTenantId Xero identifier for Tenant
     * @param superFundID Superfund id for single object
     */
    getSuperfund(xeroTenantId, superFundID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Superfunds/{SuperFundID}'
                .replace('{' + 'SuperFundID' + '}', encodeURIComponent(String(superFundID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getSuperfund.');
            }
            // verify required parameter 'superFundID' is not null or undefined
            if (superFundID === null || superFundID === undefined) {
                throw new Error('Required parameter superFundID was null or undefined when calling getSuperfund.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "SuperFunds");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves superfund products
     * @param xeroTenantId Xero identifier for Tenant
     * @param aBN The ABN of the Regulated SuperFund
     * @param uSI The USI of the Regulated SuperFund
     */
    getSuperfundProducts(xeroTenantId, aBN, uSI, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/SuperfundProducts';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getSuperfundProducts.');
            }
            if (aBN !== undefined) {
                localVarQueryParameters['ABN'] = models_1.ObjectSerializer.serialize(aBN, "string");
            }
            if (uSI !== undefined) {
                localVarQueryParameters['USI'] = models_1.ObjectSerializer.serialize(uSI, "string");
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "SuperFundProducts");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves superfunds
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call
     */
    getSuperfunds(xeroTenantId, ifModifiedSince, where, order, page, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Superfunds';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getSuperfunds.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "SuperFunds");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves a timesheet by using a unique timesheet id
     * @param xeroTenantId Xero identifier for Tenant
     * @param timesheetID Timesheet id for single object
     */
    getTimesheet(xeroTenantId, timesheetID, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Timesheets/{TimesheetID}'
                .replace('{' + 'TimesheetID' + '}', encodeURIComponent(String(timesheetID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getTimesheet.');
            }
            // verify required parameter 'timesheetID' is not null or undefined
            if (timesheetID === null || timesheetID === undefined) {
                throw new Error('Required parameter timesheetID was null or undefined when calling getTimesheet.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "TimesheetObject");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Retrieves timesheets
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call
     */
    getTimesheets(xeroTenantId, ifModifiedSince, where, order, page, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Timesheets';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling getTimesheets.');
            }
            if (where !== undefined) {
                localVarQueryParameters['where'] = models_1.ObjectSerializer.serialize(where, "string");
            }
            if (order !== undefined) {
                localVarQueryParameters['order'] = models_1.ObjectSerializer.serialize(order, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['If-Modified-Since'] = models_1.ObjectSerializer.serialize(ifModifiedSince, "Date");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "Timesheets");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Reject a leave application by a unique leave application id
     * @param xeroTenantId Xero identifier for Tenant
     * @param leaveApplicationID Leave Application id for single object
     * @param idempotencyKey This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     */
    rejectLeaveApplication(xeroTenantId, leaveApplicationID, idempotencyKey, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/LeaveApplications/{LeaveApplicationID}/reject'
                .replace('{' + 'LeaveApplicationID' + '}', encodeURIComponent(String(leaveApplicationID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling rejectLeaveApplication.');
            }
            // verify required parameter 'leaveApplicationID' is not null or undefined
            if (leaveApplicationID === null || leaveApplicationID === undefined) {
                throw new Error('Required parameter leaveApplicationID was null or undefined when calling rejectLeaveApplication.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Idempotency-Key'] = models_1.ObjectSerializer.serialize(idempotencyKey, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: {},
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "LeaveApplications");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     * Update properties on a single employee
     * @summary Updates an employee\'s detail
     * @param xeroTenantId Xero identifier for Tenant
     * @param employeeID Employee id for single object
     * @param employee
     * @param idempotencyKey This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     */
    updateEmployee(xeroTenantId, employeeID, employee, idempotencyKey, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Employees/{EmployeeID}'
                .replace('{' + 'EmployeeID' + '}', encodeURIComponent(String(employeeID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateEmployee.');
            }
            // verify required parameter 'employeeID' is not null or undefined
            if (employeeID === null || employeeID === undefined) {
                throw new Error('Required parameter employeeID was null or undefined when calling updateEmployee.');
            }
            // verify required parameter 'employee' is not null or undefined
            if (employee === null || employee === undefined) {
                throw new Error('Required parameter employee was null or undefined when calling updateEmployee.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Idempotency-Key'] = models_1.ObjectSerializer.serialize(idempotencyKey, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: models_1.ObjectSerializer.serialize(employee, "Array<Employee>"),
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "Employees");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     *
     * @summary Updates a specific leave application
     * @param xeroTenantId Xero identifier for Tenant
     * @param leaveApplicationID Leave Application id for single object
     * @param leaveApplication
     * @param idempotencyKey This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     */
    updateLeaveApplication(xeroTenantId, leaveApplicationID, leaveApplication, idempotencyKey, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/LeaveApplications/{LeaveApplicationID}'
                .replace('{' + 'LeaveApplicationID' + '}', encodeURIComponent(String(leaveApplicationID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateLeaveApplication.');
            }
            // verify required parameter 'leaveApplicationID' is not null or undefined
            if (leaveApplicationID === null || leaveApplicationID === undefined) {
                throw new Error('Required parameter leaveApplicationID was null or undefined when calling updateLeaveApplication.');
            }
            // verify required parameter 'leaveApplication' is not null or undefined
            if (leaveApplication === null || leaveApplication === undefined) {
                throw new Error('Required parameter leaveApplication was null or undefined when calling updateLeaveApplication.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Idempotency-Key'] = models_1.ObjectSerializer.serialize(idempotencyKey, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: models_1.ObjectSerializer.serialize(leaveApplication, "Array<LeaveApplication>"),
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "LeaveApplications");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     * Update properties on a single PayRun
     * @summary Updates a pay run
     * @param xeroTenantId Xero identifier for Tenant
     * @param payRunID PayRun id for single object
     * @param payRun
     * @param idempotencyKey This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     */
    updatePayRun(xeroTenantId, payRunID, payRun, idempotencyKey, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/PayRuns/{PayRunID}'
                .replace('{' + 'PayRunID' + '}', encodeURIComponent(String(payRunID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updatePayRun.');
            }
            // verify required parameter 'payRunID' is not null or undefined
            if (payRunID === null || payRunID === undefined) {
                throw new Error('Required parameter payRunID was null or undefined when calling updatePayRun.');
            }
            // verify required parameter 'payRun' is not null or undefined
            if (payRun === null || payRun === undefined) {
                throw new Error('Required parameter payRun was null or undefined when calling updatePayRun.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Idempotency-Key'] = models_1.ObjectSerializer.serialize(idempotencyKey, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: models_1.ObjectSerializer.serialize(payRun, "Array<PayRun>"),
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "PayRuns");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     * Update lines on a single payslips
     * @summary Updates a payslip
     * @param xeroTenantId Xero identifier for Tenant
     * @param payslipID Payslip id for single object
     * @param payslipLines
     * @param idempotencyKey This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     */
    updatePayslip(xeroTenantId, payslipID, payslipLines, idempotencyKey, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Payslip/{PayslipID}'
                .replace('{' + 'PayslipID' + '}', encodeURIComponent(String(payslipID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updatePayslip.');
            }
            // verify required parameter 'payslipID' is not null or undefined
            if (payslipID === null || payslipID === undefined) {
                throw new Error('Required parameter payslipID was null or undefined when calling updatePayslip.');
            }
            // verify required parameter 'payslipLines' is not null or undefined
            if (payslipLines === null || payslipLines === undefined) {
                throw new Error('Required parameter payslipLines was null or undefined when calling updatePayslip.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Idempotency-Key'] = models_1.ObjectSerializer.serialize(idempotencyKey, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: models_1.ObjectSerializer.serialize(payslipLines, "Array<PayslipLines>"),
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "Payslips");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     * Update properties on a single Superfund
     * @summary Updates a superfund
     * @param xeroTenantId Xero identifier for Tenant
     * @param superFundID Superfund id for single object
     * @param superFund
     * @param idempotencyKey This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     */
    updateSuperfund(xeroTenantId, superFundID, superFund, idempotencyKey, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Superfunds/{SuperFundID}'
                .replace('{' + 'SuperFundID' + '}', encodeURIComponent(String(superFundID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateSuperfund.');
            }
            // verify required parameter 'superFundID' is not null or undefined
            if (superFundID === null || superFundID === undefined) {
                throw new Error('Required parameter superFundID was null or undefined when calling updateSuperfund.');
            }
            // verify required parameter 'superFund' is not null or undefined
            if (superFund === null || superFund === undefined) {
                throw new Error('Required parameter superFund was null or undefined when calling updateSuperfund.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Idempotency-Key'] = models_1.ObjectSerializer.serialize(idempotencyKey, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: models_1.ObjectSerializer.serialize(superFund, "Array<SuperFund>"),
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "SuperFunds");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
    /**
     * Update properties on a single timesheet
     * @summary Updates a timesheet
     * @param xeroTenantId Xero identifier for Tenant
     * @param timesheetID Timesheet id for single object
     * @param timesheet
     * @param idempotencyKey This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     */
    updateTimesheet(xeroTenantId, timesheetID, timesheet, idempotencyKey, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/Timesheets/{TimesheetID}'
                .replace('{' + 'TimesheetID' + '}', encodeURIComponent(String(timesheetID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this.defaultHeaders);
            let localVarFormParams = {};
            let acceptHeadersFromSpec = [
                "application/json"
            ];
            const isBufferType = acceptHeadersFromSpec.includes("application/pdf") || acceptHeadersFromSpec.includes("application/octet-stream") || acceptHeadersFromSpec.includes("application/jpg");
            const responseTypeOption = isBufferType ? "arraybuffer" : "json";
            // verify required parameter 'xeroTenantId' is not null or undefined
            if (xeroTenantId === null || xeroTenantId === undefined) {
                throw new Error('Required parameter xeroTenantId was null or undefined when calling updateTimesheet.');
            }
            // verify required parameter 'timesheetID' is not null or undefined
            if (timesheetID === null || timesheetID === undefined) {
                throw new Error('Required parameter timesheetID was null or undefined when calling updateTimesheet.');
            }
            // verify required parameter 'timesheet' is not null or undefined
            if (timesheet === null || timesheet === undefined) {
                throw new Error('Required parameter timesheet was null or undefined when calling updateTimesheet.');
            }
            localVarHeaderParams['Xero-Tenant-Id'] = models_1.ObjectSerializer.serialize(xeroTenantId, "string");
            localVarHeaderParams['Idempotency-Key'] = models_1.ObjectSerializer.serialize(idempotencyKey, "string");
            localVarHeaderParams['Accept'] = acceptHeadersFromSpec.join();
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                responseType: responseTypeOption,
                data: models_1.ObjectSerializer.serialize(timesheet, "Array<Timesheet>"),
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.OAuth2.applyToRequest(localVarRequestOptions));
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            return authenticationPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'Content-Type': 'multipart/form-data' });
                    }
                    else {
                        localVarRequestOptions.data = localVarFormParams;
                        localVarRequestOptions.headers = Object.assign(Object.assign({}, localVarRequestOptions.headers), { 'content-type': 'application/x-www-form-urlencoded' });
                    }
                }
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    let body = null;
                    try {
                        const response = yield (0, axios_1.default)(localVarRequestOptions);
                        body = models_1.ObjectSerializer.deserialize(response.data, "Timesheets");
                        if (response.status && response.status >= 200 && response.status <= 299) {
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject({ response: response, body: body });
                        }
                    }
                    catch (error) {
                        const errorResponse = new ApiError_1.ApiError(error);
                        reject(JSON.stringify(errorResponse.generateError()));
                    }
                }));
            });
        });
    }
}
exports.PayrollAuApi = PayrollAuApi;
//# sourceMappingURL=payrollAUApi.js.map